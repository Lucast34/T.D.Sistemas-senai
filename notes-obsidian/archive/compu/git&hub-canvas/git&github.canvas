{
	"nodes":[
		{"id":"26c0e72abcc82db9","type":"group","x":-600,"y":-40,"width":840,"height":960,"label":"Explicações"},
		{"id":"e517c39e85fb7dc6","type":"text","text":" # Desvantagens ","x":-1520,"y":590,"width":250,"height":60},
		{"id":"c94051d2995d4848","type":"text","text":"| COMANDO | DESCRIÇÃO |\n|-|-|   \n| ***git init*** | Inicia o monitoramento do projeto |\n| ***git branch -M \"novo_nome\"*** | Altera o nome da branch (o nome da caixa principal) |\n| ***git status*** | Visualiza as atualizações do projeto |\n| ***git add .*** | Envia todos os arquivos para a caixa onde eles ficam em `staging` (em espera) |\n| ***git add \"nome_do_arquivo\"*** | Envia arquivos **EXPECÍFICOS** para a área de `staging` |\n| ***git restore --staged \"nome_do_arquivo\"*** | Remove o arquivo da área de `staging` (remove o item da caixa antes de salvar a versão) |\n| ***git log*** | Visualiza lista de commits (fotos) do projeto |\n| ***git config --global user.name \"Nome\"*** | Configura o nome do usuário globalmente (etiqueta o nome na caixa) |\n| ***git config --global user.email \"Email\"*** | Configura o email do usuário globalmente (coloca o e-mail na etiqueta da caixa) |\n| ***git config --list*** | Exibe as configurações globais do Git (mostra o dono da caixa e quem fez alterações) |\n| ***git commit -m \"descrição\"*** | Cria um ponto de restauração do projeto (tira a foto da caixa e adiciona uma descrição) |\n| ***git checkout \"nome_da_branch\"*** | Troca para uma branch existente (abre outra caixa para trabalhar nela) |\n| ***git checkout -b \"nome_da_branch\"*** | Cria e troca para uma nova branch (cria uma nova caixa auxiliar e começa a trabalhar nela) |\n| ***git branch*** | Mostra a lista de branches disponíveis (exibe as caixas auxiliares que você pode usar) |\n| ***git branch -m \"nome_antigo\" \"nome_novo\"*** | Altera o nome da branch (renomeia uma caixa auxiliar) |\n| ***git merge \"nome_da_branch\"*** | Mescla branches (junta o conteúdo de uma caixa auxiliar à caixa principal) |\n| ***git branch -d \"nome_da_branch\"*** | Deleta a branch se ela já foi mesclada (descarta a caixa auxiliar depois de juntar com a principal) |\n| ***git branch -D \"nome_da_branch\"*** | Força a exclusão de uma branch (elimina a caixa auxiliar mesmo que ainda não tenha sido mesclada) |\n| ***git remote add origin \"link\"*** | Vincula o repositório local ao remoto (conecta a caixa local a uma versão online) |\n| ***git remote*** | Verifica a conexão remota (checa se sua caixa está conectada à versão online) |\n| ***git push -u origin main*** | Envia o código para a plataforma online (coloca o conteúdo da caixa local na caixa online) |\n| ***git pull*** | Atualiza o repositório local com o remoto (traz as atualizações da caixa online para sua caixa local) |","x":-1828,"y":-220,"width":1117,"height":719},
		{"id":"d0a22c5d442b25d6","type":"text","text":"# COMANDOS DO GIT","x":-1220,"y":-400,"width":362,"height":60},
		{"id":"d5f943503233fd0c","type":"text","text":"# GIT","x":-553,"y":-560,"width":125,"height":60},
		{"id":"bc75189c828402f2","type":"text","text":"# O que é o git ","x":-320,"y":-20,"width":250,"height":60},
		{"id":"71becdfb191fc21e","type":"text","text":"Git é o **sistema de controle de versão** open source Ele é usado para controlar o **histórico de alterações** de arquivos e principalmente de projetos de desenvolvimento de software. Ele permite mais flexibilidade no fluxo de trabalho, segurança e desempenho.","x":-412,"y":100,"width":434,"height":184},
		{"id":"349b8d0cef760139","type":"text","text":"# Como surgiu ?","x":-320,"y":340,"width":279,"height":60},
		{"id":"3c8302e1470be17d","type":"text","text":"O Git foi desenvolvido pelo **criador do kernel do** Linux , Linus Torvalds,** em 2005. Tudo começou com o rompimento de relações entre a comunidade que desenvolvia o kernel do Linux e a BitKeeper, que é um sistema de controle de versão que foi usado dentro do projeto do kernel. Com esse rompimento, a ferramenta do BitKeeper passou a ser paga.\n\nCom tudo isso, Linus Torvalds decidiu construir um sistema de controle de versão que tivesse a **melhor performance** e usou a experiência que teve com a BitKeeper para construir o Git, que se tornou o sistema de controle de versão **mais utilizado no mundo**. Linus tinha como principais metas para o seu projeto:\n\n- velocidade;\n- suporte para desenvolvimento não-linear;\n- distribuído;\n- lidar com projetos grandes de forma eficiente.\n\nDesde sua criação em 2005, o Git conseguiu amadurecer, tornar-se simples de usar e ainda manter esses pontos iniciais.","x":-580,"y":480,"width":800,"height":420},
		{"id":"9bcf5fa2681e6030","type":"text","text":"# GITHUB \n\nGithub é aonde o código vai ser publicado os seu códigos, basicamente um git só que \"nas nuvens\"","x":-615,"y":-840,"width":355,"height":200},
		{"id":"76c5528c5e983b55","type":"text","text":"# Vantagens ","x":-983,"y":590,"width":250,"height":60},
		{"id":"620ea047d85978c3","type":"text","text":"#### **Desempenho**\n\nO Git pode ser considerado um dos melhores softwares de controle de versão quanto a performance. Todas as operações são pensadas para trazer praticidade e desempenho. Como ele também é distribuído, isso traz ainda mais agilidade para o desenvolvimento]já que você consegue fazer alterações no seu projeto sem uma conexão à internet.\n\n#### **Flexibilidade**\n\nUma das grandes vantagens do Git é você conseguir adaptar formatos de trabalho não lineares e ainda conseguir rastrear cada uma dessas ramificações. Independente se o seu projeto é grande ou pequeno, você consegue adaptá-lo para o seu fluxo.\n\n#### **Segurança**\n\nUma das prioridades é a integridade do código fonte do seu projeto. Todas as informações, conteúdos de código, versões, commits, tudo é protegido com SHA1, que é um algoritmo seguro de hash de criptografia. Isso proporciona mais segurança contra alterações acidentais ou maliciosas e também permite que o histórico de alterações seja totalmente rastreável.","x":-1199,"y":730,"width":466,"height":742},
		{"id":"b9fa106ae90a1884","type":"text","text":"#### **Maior complexidade**\n\nO Git pode ser **mais complexo** de se entender no início, por conta da enorme possibilidade de combinações e de ramificações do seu código. Todo esse entendimento pode ficar mais complicado de entender. \n\nAlém disso, exige que as pessoas desenvolvedoras tenham um **conhecimento maior** sobre o seu uso. Mas, depois dessa curva de aprendizado, agiliza o desenvolvimento e a entrega do time. Isso faz com que necessite de uma **maior preparação** tanto da equipe quanto dos processos do time.","x":-1795,"y":723,"width":550,"height":437},
		{"id":"7958fece54fbce12","type":"file","file":"gitgrfic.bmp","x":-1748,"y":1065,"width":457,"height":73}
	],
	"edges":[
		{"id":"60c841150cd8898b","fromNode":"bc75189c828402f2","fromSide":"bottom","toNode":"71becdfb191fc21e","toSide":"top"},
		{"id":"5ec325b6e1a5f3b2","fromNode":"71becdfb191fc21e","fromSide":"right","toNode":"349b8d0cef760139","toSide":"right"},
		{"id":"2249913e185cb67f","fromNode":"349b8d0cef760139","fromSide":"bottom","toNode":"3c8302e1470be17d","toSide":"top"},
		{"id":"c5a4ae2814f3ced0","fromNode":"76c5528c5e983b55","fromSide":"bottom","toNode":"620ea047d85978c3","toSide":"top"},
		{"id":"10780efcc03f84be","fromNode":"76c5528c5e983b55","fromSide":"left","toNode":"e517c39e85fb7dc6","toSide":"right"},
		{"id":"01badfafe13eb3c5","fromNode":"e517c39e85fb7dc6","fromSide":"bottom","toNode":"b9fa106ae90a1884","toSide":"top"},
		{"id":"a94ef169755cf56d","fromNode":"d5f943503233fd0c","fromSide":"left","toNode":"d0a22c5d442b25d6","toSide":"top"},
		{"id":"d03611224e49a113","fromNode":"d0a22c5d442b25d6","fromSide":"bottom","toNode":"c94051d2995d4848","toSide":"top"},
		{"id":"1a5325d9b6528ad7","fromNode":"d5f943503233fd0c","fromSide":"bottom","toNode":"26c0e72abcc82db9","toSide":"top"},
		{"id":"ddf784cca5e4d3dc","fromNode":"26c0e72abcc82db9","fromSide":"left","toNode":"76c5528c5e983b55","toSide":"right"},
		{"id":"646f4240d144ee25","fromNode":"d5f943503233fd0c","fromSide":"top","toNode":"9bcf5fa2681e6030","toSide":"bottom"}
	]
}